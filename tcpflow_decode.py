import os
import xml.etree.ElementTree as etree
from functools import partial

from dvlt_decode import DevialetManyFlows, DevialetFlow
import dateutil.parser

# Decode streams generated by tcpflow command eg: tcpflow -v -r file.pcapng -o dirname
class TCPFlows(DevialetManyFlows):
    def __init__(self, dirname, spark_addr, phantom_addr):
        DevialetManyFlows.__init__(self)
        self.dirname = dirname
        self.spark_addr = spark_addr
        self.phantom_addr = phantom_addr
        self.bufsize = 4096

        with open(os.path.join(dirname, 'report.xml')) as xmlfile:
            tree = etree.parse(xmlfile)

            for file in tree.findall('.//fileobject'):
                filename = file.find('filename')

                if filename is not None:
                    details = file.find('tcpflow')
                    time = dateutil.parser.parse(details.attrib['startime'])

                    if details.attrib['src_ipn'] == self.spark_addr and details.attrib['dst_ipn'] == self.phantom_addr:
                        spark_port = int(details.attrib['srcport'])
                        phantom_port = int(details.attrib['dstport'])
                        is_incoming = False
                    elif details.attrib['src_ipn'] == self.phantom_addr and details.attrib['dst_ipn'] == self.spark_addr:
                        spark_port = int(details.attrib['dstport'])
                        phantom_port = int(details.attrib['srcport'])
                        is_incoming = True
                    try:
                        with open(os.path.join(dirname, os.path.basename(filename.text)), 'rb') as datafile:
                            if (phantom_port, spark_port) in self.flows:
                                flow = self.flows[(phantom_port, spark_port)]
                            else:
                                flow = DevialetFlow(name=datafile.name, phantom_port=phantom_port, spark_port=spark_port, start_time=time)
                                self.add_flow(flow)
                            for buf in iter(partial(datafile.read, self.bufsize), b''):
                                flow.decode(buf, time=time, incoming=is_incoming)
                            
                    except NameError as e:
                        print(e)
                        pass

    def decode_all(self):
        for (phantom_port, spark_port), flow in self.flows.items():
            flow.close()
            flow.rpc_walk()

if __name__ == '__main__':
    flows = TCPFlows('/tmp/tcpflow', '192.168.178.37', '192.168.178.133')
    flows.decode_all()