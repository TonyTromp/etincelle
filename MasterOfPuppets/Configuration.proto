// Reversed by pbd (https://github.com/rsc-dev/pbd)
package Devialet.MasterOfPuppets;
import "CallMeMaybe/CommonMessages.proto";

message GroupId {
	required bytes id = 1 ;
}

message BouquetId {
	required bytes id = 1 ;
}

message RendererId {
	required bytes id = 1 ;
}

message NodeRenderer {
	required .Devialet.MasterOfPuppets.RendererId rendererId = 1 ;
	required string name = 2 ;
	required bool isActivated = 3 ;
}

message NodeGroup {
	required .Devialet.MasterOfPuppets.GroupId groupId = 1 ;
	required string name = 2 ;
	repeated .Devialet.MasterOfPuppets.NodeRenderer renderers = 3 ;
}

message NodeBouquet {
	required .Devialet.MasterOfPuppets.BouquetId bouquetId = 1 ;
	repeated .Devialet.MasterOfPuppets.NodeGroup groups = 2 ;
}

message NodeRoot {
	repeated .Devialet.MasterOfPuppets.NodeBouquet bouquets = 1 ;
}

message AddGroupQuery {
	required string name = 1 ;
	required .Devialet.MasterOfPuppets.BouquetId bouquetId = 2 ;
}

message AddRendererQuery {
	required .Devialet.MasterOfPuppets.RendererId rendererId = 1 ;
	required string name = 2 ;
	required .Devialet.MasterOfPuppets.GroupId groupId = 3 ;
}

message MoveGroupQuery {
	required .Devialet.MasterOfPuppets.GroupId groupId = 1 ;
	required .Devialet.MasterOfPuppets.BouquetId newBouquetId = 2 ;
}

message MoveRendererQuery {
	required .Devialet.MasterOfPuppets.RendererId rendererId = 1 ;
	required .Devialet.MasterOfPuppets.GroupId newGroupId = 2 ;
}

message RenameQuery {
	required bytes id = 1 ;
	required string name = 2 ;
}

message BouquetAddedNotification {
	required .Devialet.MasterOfPuppets.BouquetId bouquetId = 1 ;
}

message GroupAddedNotification {
	required .Devialet.MasterOfPuppets.BouquetId parentId = 1 ;
	required .Devialet.MasterOfPuppets.GroupId id = 2 ;
	required string name = 3 ;
}

message RendererAddedNotification {
	required .Devialet.MasterOfPuppets.GroupId parentId = 1 ;
	required .Devialet.MasterOfPuppets.RendererId id = 2 ;
	required string name = 3 ;
	required bool isActivated = 4 ;
}

message StateNotification {
	required .Devialet.MasterOfPuppets.RendererId rendererId = 1 ;
	required bool isActivated = 2 ;
}

service Configuration {
	rpc addBouquet(.Devialet.CallMeMaybe.Empty) returns (.Devialet.MasterOfPuppets.BouquetId) {
	}
	rpc removeBouquet(.Devialet.MasterOfPuppets.BouquetId) returns (.Devialet.CallMeMaybe.Empty) {
	}
	rpc addGroup(.Devialet.MasterOfPuppets.AddGroupQuery) returns (.Devialet.MasterOfPuppets.GroupId) {
	}
	rpc isolateGroup(.Devialet.MasterOfPuppets.GroupId) returns (.Devialet.MasterOfPuppets.BouquetId) {
	}
	rpc moveGroup(.Devialet.MasterOfPuppets.MoveGroupQuery) returns (.Devialet.CallMeMaybe.Empty) {
	}
	rpc removeGroup(.Devialet.MasterOfPuppets.GroupId) returns (.Devialet.CallMeMaybe.Empty) {
	}
	rpc renameGroup(.Devialet.MasterOfPuppets.RenameQuery) returns (.Devialet.CallMeMaybe.Empty) {
	}
	rpc addRenderer(.Devialet.MasterOfPuppets.AddRendererQuery) returns (.Devialet.CallMeMaybe.Empty) {
	}
	rpc moveRenderer(.Devialet.MasterOfPuppets.MoveRendererQuery) returns (.Devialet.CallMeMaybe.Empty) {
	}
	rpc removeRenderer(.Devialet.MasterOfPuppets.RendererId) returns (.Devialet.CallMeMaybe.Empty) {
	}
	rpc renameRenderer(.Devialet.MasterOfPuppets.RenameQuery) returns (.Devialet.CallMeMaybe.Empty) {
	}
	rpc bouquetAdded(.Devialet.MasterOfPuppets.BouquetAddedNotification) returns (.Devialet.CallMeMaybe.Empty) {
	}
	rpc bouquetRemoved(.Devialet.MasterOfPuppets.BouquetId) returns (.Devialet.CallMeMaybe.Empty) {
	}
	rpc bouquetRenamed(.Devialet.MasterOfPuppets.RenameQuery) returns (.Devialet.CallMeMaybe.Empty) {
	}
	rpc groupAdded(.Devialet.MasterOfPuppets.GroupAddedNotification) returns (.Devialet.CallMeMaybe.Empty) {
	}
	rpc groupMoved(.Devialet.MasterOfPuppets.MoveGroupQuery) returns (.Devialet.CallMeMaybe.Empty) {
	}
	rpc groupRemoved(.Devialet.MasterOfPuppets.GroupId) returns (.Devialet.CallMeMaybe.Empty) {
	}
	rpc groupRenamed(.Devialet.MasterOfPuppets.RenameQuery) returns (.Devialet.CallMeMaybe.Empty) {
	}
	rpc rendererAdded(.Devialet.MasterOfPuppets.RendererAddedNotification) returns (.Devialet.CallMeMaybe.Empty) {
	}
	rpc rendererMoved(.Devialet.MasterOfPuppets.MoveRendererQuery) returns (.Devialet.CallMeMaybe.Empty) {
	}
	rpc rendererRemoved(.Devialet.MasterOfPuppets.RendererId) returns (.Devialet.CallMeMaybe.Empty) {
	}
	rpc rendererRenamed(.Devialet.MasterOfPuppets.RenameQuery) returns (.Devialet.CallMeMaybe.Empty) {
	}
	rpc rendererStateChanged(.Devialet.MasterOfPuppets.StateNotification) returns (.Devialet.CallMeMaybe.Empty) {
	}
}